generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  email     String?   @unique
  socketId  String?
  status    String    @default("offline")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // 联系人关系
  contacts  Contact[] @relation("UserContacts")
  contacted Contact[] @relation("ContactedBy")

  // 消息关系
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  
  // 私聊消息关系
  sentPrivateMessages     PrivateMessage[] @relation("SentPrivateMessages")
  receivedPrivateMessages PrivateMessage[] @relation("ReceivedPrivateMessages")

  // 会话关系
  sessions  Session[]

  // 好友请求关系
  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}

model Contact {
  id        Int      @id @default(autoincrement())
  userId    Int
  contactId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("UserContacts", fields: [userId], references: [id])
  contact   User     @relation("ContactedBy", fields: [contactId], references: [id])

  @@unique([userId, contactId])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isPrivate  Boolean  @default(false)
  isRead     Boolean  @default(false)
  revoked    Boolean  @default(false)
  
  // 添加文件相关字段
  fileUrl    String?  // 可选的文件 URL
  fileName   String?  // 可选的文件名
  fileType   String?  // 可选的文件类型
  fileSize   Int?     // 可选的文件大小

  // 关联
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int?
}

model Session {
  id       Int       @id @default(autoincrement())
  userId   Int
  socketId String
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user     User      @relation(fields: [userId], references: [id])
}

model Tags {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
}

// 添加好友请求状态枚举
enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// 添加好友请求表
model FriendRequest {
  id        Int                @id @default(autoincrement())
  fromId    Int
  toId      Int
  status    FriendRequestStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  from      User              @relation("SentRequests", fields: [fromId], references: [id])
  to        User              @relation("ReceivedRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
}

model PrivateMessage {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  fromId    Int
  toId      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  revoked   Boolean  @default(false)

  sender    User     @relation("SentPrivateMessages", fields: [fromId], references: [id])
  receiver  User     @relation("ReceivedPrivateMessages", fields: [toId], references: [id])
} 